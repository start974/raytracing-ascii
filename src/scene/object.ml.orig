open Geometry
open Aux

type geometry = Sphere.t

<<<<<<< HEAD
type t = {geometry: geometry; absorbtion: Color.t; reflexivity: float}

let make geometry absorbtion reflexivity = {geometry; absorbtion; reflexivity}
=======
type material = {ka: Color.t; kd: Color.t; ks: Color.t}

type t = {obj: obj; material: material}
>>>>>>> main

let make obj material = {obj; material}

<<<<<<< HEAD
let reflexivity {reflexivity; _} = reflexivity

let shift_point ?(eps = 0.00001) {geometry; _} p =
  let normal = V3.(unit (p - Sphere.center geometry)) in
  V3.(p + (eps * normal))
=======
let material {material; _} = material

let normal_surface {obj; _} p = V3.(unit (p - Sphere.center obj))

let shift_point ?(eps = 0.0001) object_scene p =
  V3.(p + (eps * normal_surface object_scene p))
>>>>>>> main

let intersection {geometry; _} ray = Sphere.intersection_with_ray geometry ray

let reflexion obj ray = Option.get @@ Sphere.reflexion obj.geometry ray
